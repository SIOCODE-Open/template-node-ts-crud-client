{
  "generatedSource": [
    {
      "filename": ".gitignore",
      "content": "# Gitignore for Gradle and Java\n\nHELP.md\n.gradle\nbuild/\n!gradle/wrapper/gradle-wrapper.jar\n!**/src/main/**/build/\n!**/src/test/**/build/\n\n### STS ###\n.apt_generated\n.classpath\n.factorypath\n.project\n.settings\n.springBeans\n.sts4-cache\nbin/\n!**/src/main/**/bin/\n!**/src/test/**/bin/\n\n### IntelliJ IDEA ###\n.idea\n*.iws\n*.iml\n*.ipr\nout/\n!**/src/main/**/out/\n!**/src/test/**/out/\n\n### NetBeans ###\n/nbproject/private/\n/nbbuild/\n/dist/\n/nbdist/\n/.nb-gradle/\n\n### VS Code ###\n.vscode/\n\n# Git ignore for NPM\n\nnode_modules/\npackages/*/dist/\npackages/*/node_modules/\npackages/*/lib/",
      "contentHash": "95bb20e56f07ed908d2f40217f7bade699fb84f7200449dad8294b2d0bf25d3f",
      "noWriteIfExists": false
    },
    {
      "filename": "ENTITIES.md",
      "content": "# Organization Unit\n\nNo description.\n\n_Attributes_\n\n* Name : `String` - No description.\n\n\n\n_Reverse Associations_\n\n* Employees : `[]Employee` (mapped by `Employee :: Org Unit`) - Employees in the org unit\n\n\n# Employee\n\nAn employee\n\n_Attributes_\n\n* First Name : `String` - No description.\n* Last Name : `String` - No description.\n\n\n_Associations_\n\n* Org Unit : `Organization Unit` - Org unit of employee\n\n\n\n",
      "contentHash": "e860548d305d534a416a4679fb82d069ea5015026b0c02167ed89b84b377d080",
      "noWriteIfExists": false
    },
    {
      "filename": "package.json",
      "content": "{\n    \"name\": \"@example/backend-client-node\",\n    \"version\": \"0.0.1\",\n    \"private\": true,\n    \"description\": \"_You can edit this description in [`.projor/project.pglobal.yaml`](.projor/project.pglobal.yaml)_\",\n    \"main\": \"src/index.ts\",\n    \"devDependencies\": {\n        \"@types/node\": \"^22.6.1\",\n        \"typescript\": \"^5.6.2\"\n    }\n}\n",
      "contentHash": "6790480becc38c2a9aad733e9658e077d6561b7215c8afa0ce8932c9b1195e7f",
      "noWriteIfExists": false
    },
    {
      "filename": "README.md",
      "content": "# Backend Client Node\n\nThis is a [ProJor](https://projor.io) template, that generates a _TypeScript Node.JS Client Library_ for a _CRUD API_. See the [`.entities`](.projor/.entities) file on how to define the supported resources.\n\nThe API supported by this client is the same as the one provided by CRUD API Web Service templates, such as [template-spring-boot-crud](https://github.com/SIOCODE-Open/template-spring-boot-crud).\n\n[See README inside .projor/ for template customization details and internals](.projor/README.md).\n\n_You can edit this description in [`.projor/project.pglobal.yaml`](.projor/project.pglobal.yaml)_\n\n## License\n\nThis template is licensed under the [MIT License](LICENSE.md).\n\n[ProJor](https://projor.io) is licensed under either the [ProJor Free License](https://license.projor.io) or the [ProJor Commercial License](https://license.projor.io).",
      "contentHash": "c54ca53c546682ef2ededb6afb1a8f1c9b7d776b06d40e264b8c45851b605f67",
      "noWriteIfExists": false
    },
    {
      "filename": "src/index.ts",
      "content": "/** No description. */\nexport interface IOrganizationUnit {\n    /** The unique identifier for this Organization Unit */\n    id: string;\n\n    /** No description. */\n    name: string;\n}\n\n/** DTO for a new Organization Unit */\nexport interface INewOrganizationUnit {\n    /** No description. */\n    name?: string | null;\n}\n\n/** DTO for filtering Organization Unit objects */\nexport interface IOrganizationUnitFilter {\n    and?: Array<IOrganizationUnitFilter>;\n    or?: Array<IOrganizationUnitFilter>;\n    not?: IOrganizationUnitFilter;\n    name?: {\n        equals?: string;\n        notEquals?: string;\n        in?: Array<string>;\n        notIn?: Array<string>;\n        contains?: string;\n        notContains?: string;\n        startsWith?: string;\n        notStartsWith?: string;\n        endsWith?: string;\n        notEndsWith?: string;\n    };\n    id?: {\n        equals?: string;\n        notEquals?: string;\n        in?: Array<string>;\n        notIn?: Array<string>;\n    };\n}\n\nexport type IOrganizationUnitSort =\n    | \"id__asc\"\n    | \"id__desc\"\n    | \"name_asc\"\n    | \"name_desc\";\n\nexport interface IOrganizationUnitService {\n    listAll(opts?: {\n        offset: number;\n        limit: number;\n        sort: IOrganizationUnitSort;\n    }): Promise<Array<IOrganizationUnit>>;\n    getById(id: string): Promise<IOrganizationUnit | null>;\n    countAll(): Promise<number>;\n    search(\n        filter: IOrganizationUnitFilter,\n        opts?: {\n            offset: number;\n            limit: number;\n            sort: IOrganizationUnitSort;\n        }\n    );\n    countFor(filter: IOrganizationUnitFilter): Promise<number>;\n    create(\n        newOrganizationUnit: INewOrganizationUnit\n    ): Promise<IOrganizationUnit>;\n    updateName(id: string, name: string): Promise<void>;\n    clearName(id: string): Promise<void>;\n    remove(id: string): Promise<void>;\n}\n\nclass OrganizationUnitServiceImpl implements IOrganizationUnitService {\n    constructor(\n        private _baseUrl: string = \"http://localhost:8080/backend/v1\",\n        private _headers: Record<string, any> = {}\n    ) {}\n\n    async listAll(opts?: {\n        offset: number;\n        limit: number;\n        sort: IOrganizationUnitSort;\n    }): Promise<Array<IOrganizationUnit>> {\n        let requestUrl = `${this._baseUrl}/organization-unit`;\n        if (opts) {\n            const params = new URLSearchParams();\n            if (opts.offset) {\n                params.append(\"offset\", opts.offset.toString());\n            }\n            if (opts.limit) {\n                params.append(\"limit\", opts.limit.toString());\n            }\n            if (opts.sort) {\n                params.append(\"sort\", opts.sort);\n            }\n            requestUrl += `?${params.toString()}`;\n        }\n        const response = await fetch(requestUrl, { headers: this._headers });\n        return await response.json();\n    }\n\n    async countAll(): Promise<number> {\n        const response = await fetch(\n            `${this._baseUrl}/organization-unit/count`,\n            { headers: this._headers }\n        );\n        return await response.json();\n    }\n\n    async getById(id: string): Promise<IOrganizationUnit | null> {\n        const response = await fetch(\n            `${this._baseUrl}/organization-unit/${id}`,\n            { headers: this._headers }\n        );\n        return await response.json();\n    }\n\n    async search(\n        filter: IOrganizationUnitFilter,\n        opts?: {\n            offset: number;\n            limit: number;\n            sort: IOrganizationUnitSort;\n        }\n    ) {\n        let requestUrl = `${this._baseUrl}/organization-unit/search`;\n        if (opts) {\n            const params = new URLSearchParams();\n            if (opts.offset) {\n                params.append(\"offset\", opts.offset.toString());\n            }\n            if (opts.limit) {\n                params.append(\"limit\", opts.limit.toString());\n            }\n            if (opts.sort) {\n                params.append(\"sort\", opts.sort);\n            }\n            requestUrl += `?${params.toString()}`;\n        }\n        const response = await fetch(requestUrl, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                ...this._headers,\n            },\n            body: JSON.stringify(filter),\n        });\n        return await response.json();\n    }\n\n    async countFor(filter: IOrganizationUnitFilter): Promise<number> {\n        const response = await fetch(\n            `${this._baseUrl}/organization-unit/search/count`,\n            {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    ...this._headers,\n                },\n                body: JSON.stringify(filter),\n            }\n        );\n        return await response.json();\n    }\n\n    async create(\n        newOrganizationUnit: INewOrganizationUnit\n    ): Promise<IOrganizationUnit> {\n        const response = await fetch(`${this._baseUrl}/organization-unit`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                ...this._headers,\n            },\n            body: JSON.stringify(newOrganizationUnit),\n        });\n        return await response.json();\n    }\n\n    async updateName(id: string, name: string): Promise<void> {\n        const response = await fetch(`${this._baseUrl}/name/${id}`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                ...this._headers,\n            },\n            body: JSON.stringify(name),\n        });\n        return await response.json();\n    }\n    async clearName(id: string): Promise<void> {\n        const response = await fetch(`${this._baseUrl}/name/${id}`, {\n            method: \"DELETE\",\n            headers: this._headers,\n        });\n        return await response.json();\n    }\n    async remove(id: string): Promise<void> {\n        const response = await fetch(\n            `${this._baseUrl}/organization-unit/${id}`,\n            {\n                method: \"DELETE\",\n                headers: this._headers,\n            }\n        );\n        return await response.json();\n    }\n}\n\nexport function createOrganizationUnitService(\n    baseUrl: string = \"http://localhost:8080/backend/v1\",\n    headers: Record<string, any> = {}\n): IOrganizationUnitService {\n    return new OrganizationUnitServiceImpl(baseUrl, headers);\n}\n\n/** An employee */\nexport interface IEmployee {\n    /** The unique identifier for this Employee */\n    id: string;\n\n    /** No description. */\n    firstName: string;\n\n    /** No description. */\n    lastName: string;\n\n    /** Org unit of employee */\n    orgUnit: string;\n}\n\n/** DTO for a new Employee */\nexport interface INewEmployee {\n    /** No description. */\n    firstName?: string | null;\n\n    /** No description. */\n    lastName?: string | null;\n\n    /** Org unit of employee */\n    orgUnit?: string | null;\n}\n\n/** DTO for filtering Employee objects */\nexport interface IEmployeeFilter {\n    and?: Array<IEmployeeFilter>;\n    or?: Array<IEmployeeFilter>;\n    not?: IEmployeeFilter;\n    firstName?: {\n        equals?: string;\n        notEquals?: string;\n        in?: Array<string>;\n        notIn?: Array<string>;\n        contains?: string;\n        notContains?: string;\n        startsWith?: string;\n        notStartsWith?: string;\n        endsWith?: string;\n        notEndsWith?: string;\n    };\n    lastName?: {\n        equals?: string;\n        notEquals?: string;\n        in?: Array<string>;\n        notIn?: Array<string>;\n        contains?: string;\n        notContains?: string;\n        startsWith?: string;\n        notStartsWith?: string;\n        endsWith?: string;\n        notEndsWith?: string;\n    };\n    id?: {\n        equals?: string;\n        notEquals?: string;\n        in?: Array<string>;\n        notIn?: Array<string>;\n    };\n}\n\nexport type IEmployeeSort =\n    | \"id__asc\"\n    | \"id__desc\"\n    | \"firstName_asc\"\n    | \"firstName_desc\"\n    | \"lastName_asc\"\n    | \"lastName_desc\";\n\nexport interface IEmployeeService {\n    listAll(opts?: {\n        offset: number;\n        limit: number;\n        sort: IEmployeeSort;\n    }): Promise<Array<IEmployee>>;\n    getById(id: string): Promise<IEmployee | null>;\n    countAll(): Promise<number>;\n    search(\n        filter: IEmployeeFilter,\n        opts?: {\n            offset: number;\n            limit: number;\n            sort: IEmployeeSort;\n        }\n    );\n    countFor(filter: IEmployeeFilter): Promise<number>;\n    create(newEmployee: INewEmployee): Promise<IEmployee>;\n    updateFirstName(id: string, firstName: string): Promise<void>;\n    clearFirstName(id: string): Promise<void>;\n    updateLastName(id: string, lastName: string): Promise<void>;\n    clearLastName(id: string): Promise<void>;\n    updateOrgUnit(id: string, orgUnit: string): Promise<void>;\n    clearOrgUnit(id: string): Promise<void>;\n    remove(id: string): Promise<void>;\n}\n\nclass EmployeeServiceImpl implements IEmployeeService {\n    constructor(\n        private _baseUrl: string = \"http://localhost:8080/backend/v1\",\n        private _headers: Record<string, any> = {}\n    ) {}\n\n    async listAll(opts?: {\n        offset: number;\n        limit: number;\n        sort: IEmployeeSort;\n    }): Promise<Array<IEmployee>> {\n        let requestUrl = `${this._baseUrl}/employee`;\n        if (opts) {\n            const params = new URLSearchParams();\n            if (opts.offset) {\n                params.append(\"offset\", opts.offset.toString());\n            }\n            if (opts.limit) {\n                params.append(\"limit\", opts.limit.toString());\n            }\n            if (opts.sort) {\n                params.append(\"sort\", opts.sort);\n            }\n            requestUrl += `?${params.toString()}`;\n        }\n        const response = await fetch(requestUrl, { headers: this._headers });\n        return await response.json();\n    }\n\n    async countAll(): Promise<number> {\n        const response = await fetch(`${this._baseUrl}/employee/count`, {\n            headers: this._headers,\n        });\n        return await response.json();\n    }\n\n    async getById(id: string): Promise<IEmployee | null> {\n        const response = await fetch(`${this._baseUrl}/employee/${id}`, {\n            headers: this._headers,\n        });\n        return await response.json();\n    }\n\n    async search(\n        filter: IEmployeeFilter,\n        opts?: {\n            offset: number;\n            limit: number;\n            sort: IEmployeeSort;\n        }\n    ) {\n        let requestUrl = `${this._baseUrl}/employee/search`;\n        if (opts) {\n            const params = new URLSearchParams();\n            if (opts.offset) {\n                params.append(\"offset\", opts.offset.toString());\n            }\n            if (opts.limit) {\n                params.append(\"limit\", opts.limit.toString());\n            }\n            if (opts.sort) {\n                params.append(\"sort\", opts.sort);\n            }\n            requestUrl += `?${params.toString()}`;\n        }\n        const response = await fetch(requestUrl, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                ...this._headers,\n            },\n            body: JSON.stringify(filter),\n        });\n        return await response.json();\n    }\n\n    async countFor(filter: IEmployeeFilter): Promise<number> {\n        const response = await fetch(`${this._baseUrl}/employee/search/count`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                ...this._headers,\n            },\n            body: JSON.stringify(filter),\n        });\n        return await response.json();\n    }\n\n    async create(newEmployee: INewEmployee): Promise<IEmployee> {\n        const response = await fetch(`${this._baseUrl}/employee`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                ...this._headers,\n            },\n            body: JSON.stringify(newEmployee),\n        });\n        return await response.json();\n    }\n\n    async updateFirstName(id: string, firstName: string): Promise<void> {\n        const response = await fetch(`${this._baseUrl}/first-name/${id}`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                ...this._headers,\n            },\n            body: JSON.stringify(firstName),\n        });\n        return await response.json();\n    }\n    async clearFirstName(id: string): Promise<void> {\n        const response = await fetch(`${this._baseUrl}/first-name/${id}`, {\n            method: \"DELETE\",\n            headers: this._headers,\n        });\n        return await response.json();\n    }\n    async updateLastName(id: string, lastName: string): Promise<void> {\n        const response = await fetch(`${this._baseUrl}/last-name/${id}`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                ...this._headers,\n            },\n            body: JSON.stringify(lastName),\n        });\n        return await response.json();\n    }\n    async clearLastName(id: string): Promise<void> {\n        const response = await fetch(`${this._baseUrl}/last-name/${id}`, {\n            method: \"DELETE\",\n            headers: this._headers,\n        });\n        return await response.json();\n    }\n    async updateOrgUnit(id: string, orgUnit: string): Promise<void> {\n        const response = await fetch(`${this._baseUrl}/org-unit/${id}`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                ...this._headers,\n            },\n            body: JSON.stringify(orgUnit),\n        });\n        return await response.json();\n    }\n    async clearOrgUnit(id: string): Promise<void> {\n        const response = await fetch(`${this._baseUrl}/org-unit/${id}`, {\n            method: \"DELETE\",\n            headers: this._headers,\n        });\n        return await response.json();\n    }\n    async remove(id: string): Promise<void> {\n        const response = await fetch(`${this._baseUrl}/employee/${id}`, {\n            method: \"DELETE\",\n            headers: this._headers,\n        });\n        return await response.json();\n    }\n}\n\nexport function createEmployeeService(\n    baseUrl: string = \"http://localhost:8080/backend/v1\",\n    headers: Record<string, any> = {}\n): IEmployeeService {\n    return new EmployeeServiceImpl(baseUrl, headers);\n}\n",
      "contentHash": "68c0bc57a3717bc402d886418063803c21f3c493aa16e4abc737ca9aa03cde86",
      "noWriteIfExists": false
    },
    {
      "filename": "tsconfig.json",
      "content": "{\n    \"compilerOptions\": {\n        \"target\": \"ES2015\",\n        \"module\": \"CommonJS\",\n        \"moduleResolution\": \"Node\",\n        \"esModuleInterop\": true,\n        \"skipLibCheck\": true,\n        \"allowSyntheticDefaultImports\": true\n    },\n    \"include\": [\"src/**/*.ts\"],\n    \"exclude\": [\"node_modules\"]\n}\n",
      "contentHash": "3f290e4d39d65afb66573a44581aee4d1a08487ea9d548fa6f8d5c2a689acbee",
      "noWriteIfExists": false
    }
  ]
}